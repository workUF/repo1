# Log4j建议只使用四个级别，优 先级从高到低分别是ERROR、WARN、INFO、DEBUG。
# 通过在这里定义的级别，可以控制到应用程序中相应级别的日志信息的开关。
# 比如在这里定 义了INFO级别，只有等于及高于这个级别的才进行处理，
# 则应用程序中所有DEBUG级别的日志信息将不被打印出来。
#CONSOLE为目的地是控制台,LOGFILE为目的地是文件
#log4j.rootLogger=INFO, CONSOLE, LOGFILE

log4j.rootLogger=INFO, CONSOLE, LOGFILE

# Set the enterprise logger category to FATAL and its only appender to CONSOLE.
log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE



# 定义一个名为stdout的输出目的地，ConsoleAppender为控制台。
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Encoding=UTF-8

# 可以灵活地指定布局模式
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=%d{[yyyy-MM-dd HH:mm:ss]} [%p] %c{1}:%L %m%n

# LOGFILE is set to be a File appender using a PatternLayout.
log4j.appender.LOGFILE=org.apache.log4j.FileAppender


# 每天产生一个新日志文件
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
# 输出文件位置和文件名
log4j.appender.LOGFILE.File=d:/logs/blog
log4j.appender.LOGFILE.DatePattern='_'yyyy-MM-dd'.log'
#每次在文件尾写入新的日志信息
log4j.appender.LOGFILE.Append=true
log4j.appender.LOGFILE.encoding=UTF-8
# 可以灵活地指定布局模式
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=%d{[yyyy-MM-dd HH:mm:ss]} [%-5p] %c{1}:%L %m%n
log4j.appender.LOGFILE.Target=System.out

